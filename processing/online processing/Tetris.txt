cube cubes;
int rotation =0;
void setup(){
  size(400,800);
  
    cubes=new cube();
    stroke(255);
    for(int i=0;i<11;i+=1){
      line(i*cubes.scl,0,i*cubes.scl,height);
    }
    for(int i=0;i<21;i+=1){
      line(0,i*cubes.scl,width,i*cubes.scl);
    }
  //frameRate(3);
}

void draw(){
  background(0);
  stroke(255);
    for(int i=0;i<11;i+=1){
      line(i*cubes.scl,0,i*cubes.scl,height);
    }
    for(int i=0;i<21;i+=1){
      line(0,i*cubes.scl,width,i*cubes.scl);
    }
  cubes.show();
  
  cubes.elliminate();
  cubes.death();
  cubes.record();   
  cubes.reset();
  cubes.update();
  
  
  delay(100);
}
void keyPressed(){
  boolean right=false;
  right=false;
  boolean left;
  left=false;
   if(keyCode==RIGHT){
     for(int i=0;i<4;i+=1){
       if(cubes.sq[cubes.ran][i].x>=9){
         right=true;
       }      
     }   
     for(int i=0;i<4;i+=1){
       if(cubes.sq[cubes.ran][i].x<9){
         if(cubes.net[int(cubes.sq[cubes.ran][i].x+1)][int(cubes.sq[cubes.ran][i].y)]==1){
           right=true;
         }
       }
     }
     
      if(right==false){
        for(int i=0;i<4;i+=1){
          cubes.sq[cubes.ran][i].x+=1;
        }
      }
     
   }
   
   if(keyCode==LEFT){
     for(int i=0;i<4;i+=1){
       if(cubes.sq[cubes.ran][i].x<=0){
         left=true;
       }      
     }   
     for(int i=0;i<4;i+=1){
       if(cubes.sq[cubes.ran][i].x>0){
         if(cubes.net[int(cubes.sq[cubes.ran][i].x-1)][int(cubes.sq[cubes.ran][i].y)]==1){
           left=true;
         }
       }
     }
      if(left==false){
        for(int i=0;i<4;i+=1){
          cubes.sq[cubes.ran][i].x-=1;
        }
      }
   }
   if(keyCode==UP){
     boolean edge=false;
     boolean edgel1=false;
     boolean edger1=false;
     for(int i=0;i<4;i+=1){
       if(cubes.sq[cubes.ran][i].x>0){
         if(cubes.net[int(cubes.sq[cubes.ran][i].x-1)][int(cubes.sq[cubes.ran][i].y)]==1){
           edgel1=true; 
         }
       }
       if(cubes.sq[cubes.ran][i].x<9){
         if(cubes.net[int(cubes.sq[cubes.ran][i].x+1)][int(cubes.sq[cubes.ran][i].y)]==1){
           edger1=true; 
         }
       }
       if(cubes.sq[cubes.ran][i].x==0){
         edgel1=true;
       }
       if(cubes.sq[cubes.ran][i].x==9){
         edger1=true;
       }
     }
     
     if(rotation==0){
       cubes.sq[0][0].add(new PVector(1,-1));
       cubes.sq[0][1].add(new PVector(0,-0));
       cubes.sq[0][2].add(new PVector(1,1));
       cubes.sq[0][3].add(new PVector(0,2));
       
       
       cubes.sq[1][0].add(new PVector(2,0));
       cubes.sq[1][1].add(new PVector(1,1));
       cubes.sq[1][2].add(new PVector(0,0));
       cubes.sq[1][3].add(new PVector(-1,1));
       
       cubes.sq[2][0].add(new PVector(0,2));
       cubes.sq[2][1].add(new PVector(1,-1));
       cubes.sq[2][2].add(new PVector(0,0));
       cubes.sq[2][3].add(new PVector(-1,1));
       
       cubes.sq[3][0].add(new PVector(2,0));
       cubes.sq[3][1].add(new PVector(1,-1));
       cubes.sq[3][2].add(new PVector(0,0));
       cubes.sq[3][3].add(new PVector(-1,1));
       
       cubes.sq[4][0].add(new PVector(0,0));
       cubes.sq[4][1].add(new PVector(0,-0));
       cubes.sq[4][2].add(new PVector(0,0));
       cubes.sq[4][3].add(new PVector(0,0));
       
       cubes.sq[5][0].add(new PVector(1,-1));
       cubes.sq[5][1].add(new PVector(0,-0));
       cubes.sq[5][2].add(new PVector(-1,1));
       cubes.sq[5][3].add(new PVector(-2,2));
       
       cubes.sq[6][0].add(new PVector(1,1));
       cubes.sq[6][1].add(new PVector(1,-1));
       cubes.sq[6][2].add(new PVector(0,0));
       cubes.sq[6][3].add(new PVector(-1,1));
       
       for(int i=0;i<7;i+=1){
         for (int j=0;j<4;j+=1){
           if(cubes.sq[i][j].x<0){
             edge=true;
           }
         }
       }
       if(edge==true){
         for(int i=0;i<7;i+=1){
           for(int j=0;j<4;j+=1){
             cubes.sq[i][j].add(new PVector(1,0));
           }  
         }
       }
       
     
       rotation+=1;
     }
     
     else if(rotation==1&&(edger1==false||edgel1==false)){
       cubes.sq[0][0].add(new PVector(-1,1));
       cubes.sq[0][1].add(new PVector(0,-0));
       cubes.sq[0][2].add(new PVector(-1,-1));
       cubes.sq[0][3].add(new PVector(0,-2));
       
       
       cubes.sq[1][0].add(new PVector(-2,0));
       cubes.sq[1][1].add(new PVector(-1,-1));
       cubes.sq[1][2].add(new PVector(0,0));
       cubes.sq[1][3].add(new PVector(1,-1));
       
       cubes.sq[2][0].add(new PVector(-2,0));
       cubes.sq[2][1].add(new PVector(1,1));
       cubes.sq[2][2].add(new PVector(0,0));
       cubes.sq[2][3].add(new PVector(-1,-1));
       
       cubes.sq[3][0].add(new PVector(0,2));
       cubes.sq[3][1].add(new PVector(1,1));
       cubes.sq[3][2].add(new PVector(0,0));
       cubes.sq[3][3].add(new PVector(-1,-1));
       
       cubes.sq[4][0].add(new PVector(0,0));
       cubes.sq[4][1].add(new PVector(0,-0));
       cubes.sq[4][2].add(new PVector(0,0));
       cubes.sq[4][3].add(new PVector(0,0));
       
       cubes.sq[5][0].add(new PVector(-1,1));
       cubes.sq[5][1].add(new PVector(0,-0));
       cubes.sq[5][2].add(new PVector(1,-1));
       cubes.sq[5][3].add(new PVector(2,-2));
       if(cubes.sq[5][2].x>9){
         for(int i=0;i<4;i+=1){
           cubes.sq[5][i].add(new PVector(-2,0));
         }
       }
       
       cubes.sq[6][0].add(new PVector(-1,1));
       cubes.sq[6][1].add(new PVector(1,1));
       cubes.sq[6][2].add(new PVector(0,0));
       cubes.sq[6][3].add(new PVector(-1,-1));
       
       for(int i=0;i<7;i+=1){
         for (int j=0;j<4;j+=1){
           if(cubes.sq[i][j].x<0){
             edge=true;
           }
         }
       }
       if(edge==true){
         for(int i=0;i<7;i+=1){
           for(int j=0;j<4;j+=1){
             cubes.sq[i][j].add(new PVector(1,0));
           }  
         }
       }
     
       rotation+=1;
     }
     else if(rotation==2){
       cubes.sq[0][0].add(new PVector(1,-1));
       cubes.sq[0][1].add(new PVector(0,-0));
       cubes.sq[0][2].add(new PVector(1,1));
       cubes.sq[0][3].add(new PVector(0,2));
       
       cubes.sq[1][0].add(new PVector(2,0));
       cubes.sq[1][1].add(new PVector(1,1));
       cubes.sq[1][2].add(new PVector(0,0));
       cubes.sq[1][3].add(new PVector(-1,1));
       
       cubes.sq[2][0].add(new PVector(0,-2));
       cubes.sq[2][1].add(new PVector(-1,1));
       cubes.sq[2][2].add(new PVector(0,0));
       cubes.sq[2][3].add(new PVector(1,-1));
       
       cubes.sq[3][0].add(new PVector(-2,0));
       cubes.sq[3][1].add(new PVector(-1,1));
       cubes.sq[3][2].add(new PVector(0,0));
       cubes.sq[3][3].add(new PVector(1,-1));
       
       cubes.sq[4][0].add(new PVector(0,0));
       cubes.sq[4][1].add(new PVector(0,-0));
       cubes.sq[4][2].add(new PVector(0,0));
       cubes.sq[4][3].add(new PVector(0,0));
       
       cubes.sq[5][0].add(new PVector(1,-1));
       cubes.sq[5][1].add(new PVector(0,-0));
       cubes.sq[5][2].add(new PVector(-1,1));
       cubes.sq[5][3].add(new PVector(-2,2));
       
       cubes.sq[6][0].add(new PVector(-1,-1));
       cubes.sq[6][1].add(new PVector(-1,1));
       cubes.sq[6][2].add(new PVector(0,0));
       cubes.sq[6][3].add(new PVector(1,-1));
       
       for(int i=0;i<7;i+=1){
         for (int j=0;j<4;j+=1){
           if(cubes.sq[i][j].x<0){
             edge=true;
           }
         }
       }
       if(edge==true){
         for(int i=0;i<7;i+=1){
           for(int j=0;j<4;j+=1){
             cubes.sq[i][j].add(new PVector(1,0));
           }  
         }
       }
       
     
       rotation+=1;
     }
      else if(rotation==3&&(edger1==false||edgel1==false)){
       cubes.sq[0][0].add(new PVector(-1,1));
       cubes.sq[0][1].add(new PVector(0,-0));
       cubes.sq[0][2].add(new PVector(-1,-1));
       cubes.sq[0][3].add(new PVector(0,-2));
       
       cubes.sq[1][0].add(new PVector(-2,0));
       cubes.sq[1][1].add(new PVector(-1,-1));
       cubes.sq[1][2].add(new PVector(0,0));
       cubes.sq[1][3].add(new PVector(1,-1));
       
       cubes.sq[2][0].add(new PVector(2,0));
       cubes.sq[2][1].add(new PVector(-1,-1));
       cubes.sq[2][2].add(new PVector(0,0));
       cubes.sq[2][3].add(new PVector(1,1));
       
       cubes.sq[3][0].add(new PVector(0,-2));
       cubes.sq[3][1].add(new PVector(-1,-1));
       cubes.sq[3][2].add(new PVector(0,0));
       cubes.sq[3][3].add(new PVector(1,1));
       
       cubes.sq[4][0].add(new PVector(0,0));
       cubes.sq[4][1].add(new PVector(0,-0));
       cubes.sq[4][2].add(new PVector(0,0));
       cubes.sq[4][3].add(new PVector(0,0));
       
       cubes.sq[5][0].add(new PVector(-1,1));
       cubes.sq[5][1].add(new PVector(0,-0));
       cubes.sq[5][2].add(new PVector(1,-1));
       cubes.sq[5][3].add(new PVector(2,-2));
       if(cubes.sq[5][2].x>9){
         for(int i=0;i<4;i+=1){
           cubes.sq[5][i].add(new PVector(-2,0));
         }
       }
       
       cubes.sq[6][0].add(new PVector(1,-1));
       cubes.sq[6][1].add(new PVector(-1,-1));
       cubes.sq[6][2].add(new PVector(0,0));
       cubes.sq[6][3].add(new PVector(1,1));
       
       for(int i=0;i<7;i+=1){
         for (int j=0;j<4;j+=1){
           if(cubes.sq[i][j].x<0){
             edge=true;
           }
         }
       }
       if(edge==true){
         for(int i=0;i<7;i+=1){
           for(int j=0;j<4;j+=1){
             cubes.sq[i][j].add(new PVector(1,0));
           }  
         }
       }
     
       rotation=0;
     }
    println(edge,edger1,edgel1);
   }
   
   
}
class cube{
  float scl;
  int ran;
  PVector sq[][] =new PVector[8][4];
  int net[][]=new int[10][20];
  int colors[][]=new int[10][20];
  cube(){
    scl=40;
    ran=int(random(7));
    sq[0][0]=new PVector (4,1);
    sq[0][1]=new PVector (5,1);
    sq[0][2]=new PVector (5,0);
    sq[0][3]=new PVector (6,0);
    
    sq[1][0]=new PVector (4,0);
    sq[1][1]=new PVector (5,0);
    sq[1][2]=new PVector (5,1);
    sq[1][3]=new PVector (6,1);
    
    sq[2][0]=new PVector (6,0);
    sq[2][1]=new PVector (4,1);
    sq[2][2]=new PVector (5,1);
    sq[2][3]=new PVector (6,1);
    
    sq[3][0]=new PVector (4,0);
    sq[3][1]=new PVector (4,1);
    sq[3][2]=new PVector (5,1);
    sq[3][3]=new PVector (6,1);
    
    sq[4][0]=new PVector (4,0);
    sq[4][1]=new PVector (5,0);
    sq[4][2]=new PVector (4,1);
    sq[4][3]=new PVector (5,1);
    
    sq[5][0]=new PVector (3,0);
    sq[5][1]=new PVector (4,0);
    sq[5][2]=new PVector (5,0);
    sq[5][3]=new PVector (6,0);
    
    sq[6][0]=new PVector (5,0);
    sq[6][1]=new PVector (4,1);
    sq[6][2]=new PVector (5,1);
    sq[6][3]=new PVector (6,1);
    
    
  }
  void show(){
    for(int i=0;i<4;i+=1){
      //stroke(0);
      if(ran==0) fill(0,255,0);
      else if(ran==1) fill(255,0,0);
      else if(ran==2) fill(255,165,0);
      else if(ran==3) fill(0,0,255);
      else if(ran==4) fill(255,255,0);
      else if(ran==5) fill(255,255,100);
      else fill(139,0,255);
       if(ran==0) stroke(0,255,0);
      else if(ran==1) stroke(255,0,0);
      else if(ran==2) stroke(255,165,0);
      else if(ran==3) stroke(0,0,255);
      else if(ran==4) stroke(255,255,0);
      else if(ran==5) stroke(255,255,100);
      else stroke(139,0,255);
      rect(sq[ran][i].x*scl,sq[ran][i].y*scl,scl,scl);
    }
    //println(rotation);
  }
  void update(){
    for(int i=0;i<4;i+=1){
      sq[ran][i].y+=1;  
      
    }
  }
  void reset(){
    boolean re=false;
    re=false;
    for(int i=0;i<4;i+=1){
      if(sq[ran][i].y+1==20){
       re=true;
      }
    }
    
    for(int i=0;i<4;i+=1){
      if((sq[ran][i].y+1)<20){
        if(net[int(sq[ran][i].x)][int(sq[ran][i].y+1)]==1){
          re=true;
        }
      }
    }
    
    if(re==true){
      for(int i=0;i<4;i+=1){
        colors[int(sq[ran][i].x)][int(sq[ran][i].y)]=ran;
        net[int(sq[ran][i].x)][int(sq[ran][i].y)]=1;
      }
      ran=int(random(7));
      rotation=0;
      sq[0][0]=new PVector (4,0);
      sq[0][1]=new PVector (5,0);
      sq[0][2]=new PVector (5,-1);
      sq[0][3]=new PVector (6,-1);
    
      sq[1][0]=new PVector (4,-1);
      sq[1][1]=new PVector (5,-1);
      sq[1][2]=new PVector (5,0);
      sq[1][3]=new PVector (6,0);
    
      sq[2][0]=new PVector (6,-1);
      sq[2][1]=new PVector (4,0);
      sq[2][2]=new PVector (5,0);
      sq[2][3]=new PVector (6,0);
    
      sq[3][0]=new PVector (4,-1);
      sq[3][1]=new PVector (4,0);
      sq[3][2]=new PVector (5,0);
      sq[3][3]=new PVector (6,0);
    
      sq[4][0]=new PVector (4,-1);
      sq[4][1]=new PVector (5,-1);
      sq[4][2]=new PVector (4,0);
      sq[4][3]=new PVector (5,0);
    
       sq[5][0]=new PVector (3,-1);
      sq[5][1]=new PVector (4,-1);
      sq[5][2]=new PVector (5,-1);
      sq[5][3]=new PVector (6,-1);
    
      sq[6][0]=new PVector (5,-1);
      sq[6][1]=new PVector (4,0);
      sq[6][2]=new PVector (5,0);
      sq[6][3]=new PVector (6,0);
    }
  }
  
  void record(){
    for(int i=0;i<10;i+=1){
      for(int j=0;j<20;j+=1){
        if(net[i][j]==1){
          //stroke(0);
          if(colors[i][j]==0) fill(0,255,0);         
          else if(colors[i][j]==1) fill(255,0,0);
          else if(colors[i][j]==2) fill(255,165,0);
          else if(colors[i][j]==3) fill(0,0,255);
          else if(colors[i][j]==4) fill(255,255,0);
          else if(colors[i][j]==5) fill(255,255,100);
          else fill(139,0,255);
          if(colors[i][j]==0) stroke(0,255,0);
      else if(colors[i][j]==1) stroke(255,0,0);
      else if(colors[i][j]==2) stroke(255,165,0);
      else if(colors[i][j]==3) stroke(0,0,255);
      else if(colors[i][j]==4) stroke(255,255,0);
      else if(colors[i][j]==5) stroke(255,255,100);
      else stroke(139,0,255);
          rect(i*scl,j*scl,scl,scl);
        }
      }
    }
  }
  void elliminate(){
    float sum;
    for(int i=0;i<20;i+=1){
      sum=0;
      for(int j=0;j<10;j+=1){
        sum+=net[j][i];
      }
      //println(sum);
      if(sum>9){
        for(int k=0;k<10;k+=1){
          net[k][i]=0;
          colors[k][i]=8;
        }
        for(int k=1;k<i+1;k+=1){
          for(int j=0;j<10;j+=1){
            net[j][i+1-k]=net[j][i-k]; 
            colors[j][i+1-k]=colors[j][i-k];
            
          }
        }
        
        for(int k=0;k<10;k+=1){
          net[k][0]=0;
           colors[k][0]=8;
        }
      }
    }
  }
  
  void death(){
    boolean death=false;
    for(int i=0;i<10;i+=1){
        for(int j=0;j<10;j+=1){
          if(net[j][0]==1){
            death=true;
          }
        }    
    }
    if(death==true){
            for(int j=0;j<10;j+=1){
              for(int k=0;k<20;k+=1){
                net[j][k]=0;
                
                 
              }
            }
           
          }
          
  }

}
